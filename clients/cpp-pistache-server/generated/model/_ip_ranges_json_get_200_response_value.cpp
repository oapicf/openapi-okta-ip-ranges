/**
* OpenAPI Okta IP Ranges
* OpenAPI specification and a set of generated API clients for Okta IP Ranges
*
* The version of the OpenAPI document: 0.10.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_ip_ranges_json_get_200_response_value.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

_ip_ranges_json_get_200_response_value::_ip_ranges_json_get_200_response_value()
{
    m_Ip_rangesIsSet = false;
    
}

void _ip_ranges_json_get_200_response_value::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool _ip_ranges_json_get_200_response_value::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _ip_ranges_json_get_200_response_value::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_ip_ranges_json_get_200_response_value" : pathPrefix;

         
    if (ipRangesIsSet())
    {
        const std::vector<std::string>& value = m_Ip_ranges;
        const std::string currentValuePath = _pathPrefix + ".ipRanges";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool _ip_ranges_json_get_200_response_value::operator==(const _ip_ranges_json_get_200_response_value& rhs) const
{
    return
    
    
    
    ((!ipRangesIsSet() && !rhs.ipRangesIsSet()) || (ipRangesIsSet() && rhs.ipRangesIsSet() && getIpRanges() == rhs.getIpRanges()))
    
    ;
}

bool _ip_ranges_json_get_200_response_value::operator!=(const _ip_ranges_json_get_200_response_value& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _ip_ranges_json_get_200_response_value& o)
{
    j = nlohmann::json::object();
    if(o.ipRangesIsSet() || !o.m_Ip_ranges.empty())
        j["ip_ranges"] = o.m_Ip_ranges;
    
}

void from_json(const nlohmann::json& j, _ip_ranges_json_get_200_response_value& o)
{
    if(j.find("ip_ranges") != j.end())
    {
        j.at("ip_ranges").get_to(o.m_Ip_ranges);
        o.m_Ip_rangesIsSet = true;
    } 
    
}

std::vector<std::string> _ip_ranges_json_get_200_response_value::getIpRanges() const
{
    return m_Ip_ranges;
}
void _ip_ranges_json_get_200_response_value::setIpRanges(std::vector<std::string> const& value)
{
    m_Ip_ranges = value;
    m_Ip_rangesIsSet = true;
}
bool _ip_ranges_json_get_200_response_value::ipRangesIsSet() const
{
    return m_Ip_rangesIsSet;
}
void _ip_ranges_json_get_200_response_value::unsetIp_ranges()
{
    m_Ip_rangesIsSet = false;
}


} // namespace org::openapitools::server::model

