/**
 * OpenAPI Okta IP Ranges
 * OpenAPI specification and a set of generated API clients for Okta IP Ranges
 *
 * The version of the OpenAPI document: 0.9.0-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/_ip_ranges_json_get_200_response_value.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



_ip_ranges_json_get_200_response_value::_ip_ranges_json_get_200_response_value()
{
    m_Ip_rangesIsSet = false;
}

_ip_ranges_json_get_200_response_value::~_ip_ranges_json_get_200_response_value()
{
}

void _ip_ranges_json_get_200_response_value::validate()
{
    // TODO: implement validation
}

web::json::value _ip_ranges_json_get_200_response_value::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Ip_rangesIsSet)
    {
        val[utility::conversions::to_string_t(U("ip_ranges"))] = ModelBase::toJson(m_Ip_ranges);
    }

    return val;
}

bool _ip_ranges_json_get_200_response_value::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ip_ranges"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ip_ranges")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setIpRanges;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIpRanges);
            setIpRanges(refVal_setIpRanges);
        }
    }
    return ok;
}

void _ip_ranges_json_get_200_response_value::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Ip_rangesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ip_ranges")), m_Ip_ranges));
    }
}

bool _ip_ranges_json_get_200_response_value::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ip_ranges"))))
    {
        std::vector<utility::string_t> refVal_setIpRanges;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ip_ranges"))), refVal_setIpRanges );
        setIpRanges(refVal_setIpRanges);
    }
    return ok;
}

std::vector<utility::string_t>& _ip_ranges_json_get_200_response_value::getIpRanges()
{
    return m_Ip_ranges;
}

void _ip_ranges_json_get_200_response_value::setIpRanges(const std::vector<utility::string_t>& value)
{
    m_Ip_ranges = value;
    m_Ip_rangesIsSet = true;
}

bool _ip_ranges_json_get_200_response_value::ipRangesIsSet() const
{
    return m_Ip_rangesIsSet;
}

void _ip_ranges_json_get_200_response_value::unsetIp_ranges()
{
    m_Ip_rangesIsSet = false;
}
}
}
}
}


