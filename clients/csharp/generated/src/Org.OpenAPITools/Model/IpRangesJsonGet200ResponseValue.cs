/*
 * OpenAPI Okta IP Ranges
 *
 * OpenAPI specification and a set of generated API clients for Okta IP Ranges
 *
 * The version of the OpenAPI document: 0.10.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object containing IP ranges for a specific regional cell
    /// </summary>
    [DataContract(Name = "_ip_ranges_json_get_200_response_value")]
    public partial class IpRangesJsonGet200ResponseValue : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpRangesJsonGet200ResponseValue" /> class.
        /// </summary>
        /// <param name="ipRanges">ipRanges.</param>
        public IpRangesJsonGet200ResponseValue(List<string> ipRanges = default(List<string>))
        {
            this.IpRanges = ipRanges;
        }

        /// <summary>
        /// Gets or Sets IpRanges
        /// </summary>
        [DataMember(Name = "ip_ranges", EmitDefaultValue = false)]
        public List<string> IpRanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IpRangesJsonGet200ResponseValue {\n");
            sb.Append("  IpRanges: ").Append(IpRanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
